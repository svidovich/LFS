#24: Make

This one is weird. I am going to make make.
First, fix an error caused by glibc ( THANKS GLIBC )

	sed -i '211,217 d; 219,229 d; 232 d' glob/glob.c

To configure, issue

	./configure --prefix=/tools --without-guile

Guile may be available on host, but won't be in the chroot environment. Skip em.

#25: Patch

This allows us to modify / craete files by applying a patch created by diff.
Business as usual here!

#26: Perl

Practical Extraction and Report Language

This one is... odd. let's configure first:

	sh Configure -des -Dprefix=/tools -Dlibs=-lm -Uloclibpth -Ulocincpth

What the fuck

des: default for all items / completion of all tasks / silence non-essential output

Uloc... undefine variables that cause the configuration to search for installed components on the host.


After that, run make.

We then only need a couple of utilities and libraries --

	cp -v perl cpan/podlators/scripts/pod2man /tools/bin
	mkdir -pv /tools/lib/perl5/5.28.0
	cp -Rv lib/* /tools/lib/perl5/5.28.0

NOTE: the numbers depend on the version you are installing!

#27: sed

This is a stream editor.
Business as usual!

#28: Tar

The original tape archive program!
Business as usual.
Interesting, though, to untar tar.

#29: Texinfo

This package contains programs regarding info pages.
Don't worry about the error about TestXS_la-TestXS.lo. It is not important.
Otherwise, business as usual.

#30: Util-linux

This contains many utility programs.

We can prep it as such:

./configure --prefix=/tools --without-python --disable-makeinstall-chown --without-systemdsystemunitdir --without-ncurses PKG_CONFIG=""

The options are self explanatory. After that, just make and make install.

# 31: XZ

This is a file xompressor. Yo!
Business as usual.



/////\\\\\||||||/////\\\\\|||||/////\\\\\|||||/////\\\\\
                 ! TOOLCHAIN COMPLETE !
/////\\\\\||||||/////\\\\\|||||/////\\\\\|||||/////\\\\\

We need to change ownership. In another terminal...

	sudo -i
	chown -R root:root /mnt/lfs/tools

Now, it is time to build the LFS system c:

Let us begin.

Do NOT use optimizations. Follow the instructions EXACTLY.
First we need to prep the virtual kernel file systems. This will be used to communicate to and from the kernel. No disk space will be used; their content is in memory. Let's make some directories, you will need to be root from now on:

	mkdir -pv $LFS/{dev,proc,sys,run}

When the kernel bots, it needs devices that exist - console and null. These must be available on the hard disk. Construct them thus:

	mknod -m 600 $LFS/dev/console c 5 1
	mknod -m 666 $LFS/dev/nul c 1 3

We have to build /dev manually since we have not booted. You can do this with a bind mount at the host system's /dev directory. Do this:

	mount -v --bind /dev $LFS/dev

This is like a symlink for mounts in a way.

Now we are ready to mount the virtual kernel filesystems!

	mount -vt devpts devpts $LFS/dev/pts -o gid=5,mode=0620
	--> gid=5 says that all devpts created device nodes are owned by group id 5
	--> mode=0620 says that all devpts created device nodes have user readable and writable, and group writeable settings.

	mount -vt proc proc $LFS/proc
	mount -vt sysfs sysfs $LFS/sys
	mount -vt tmpfs tmpfs $LFS/run
