Today, we continue chapter 5.

#5: Linux API Headers

The Linux kernel has to expose an API for C to use. We will sanitize C header files shipped along with the kernel source ( linux-<version>.tar.xz  ).

As usual, let's tar -xJf the tarball, and enter the directory. Then we can issue

                              make mrproper

In order to extract user visible kernel headers, we will issue the following:

                make INSTALL_HDR_PATH=dest headers_install
                cp -rv dest/include/* /tools/include

#3: Glibc

We will start by untarring with -xJf since it is a tar.xz.
Like binutils, we need a dedicated build directory, so we issue

                mkdir -v build
                cd build

We prep using a long command

../configure --prefix=/tools --host=$LFS_TGT --build=$(../scripts/config.guess) --enable-kernel=3.2 --with-headers=/tools/include libc_cv_forced_unwind=yes libc_cv_c_cleanup=yes

DON'T worry about enable-kernel=3.2 : this just says we want to have support for kernel versions 3.2 and LATER.

Forced unwind is used because binutils was cross-compiled. We can't use it until glibc is installed. Thus, we skip testing for forced unwind results in the configuration step.

Configure success ( :

We can make, and install now.

The moment of truth comes next, when we test whether compiling and linking a basic C program functions or not.

We expected [Requesting program interpreter... ]

And it's just what we got! yay!

#4: Libstdc++ from GCC

This depended on glibc, so we waited until now to prop it up. Since libstdc++ is part of gcc, we start in the gcc directory. We had deleted the folder prior, so we re-extract the tarball using -xJf, and then change into the directory.

We also create a build directory.

Next, we can prep:

../libstdc++-v3/configure --host=$LFS_TGT --prefix=/tools --disable-multilib --disable-nls --disable-libstdcxx-threads --disable-libstdcxx-pch --with-gxx-include-dir=/tools/$LFS_TGT/include/c++/8.2.0

We prevent installation of precompiled include files. We also cannot build the c++ threads library... since the c one hasn't been installed, either.

We include the directory since we are not in a top level directory of the build setup.

Let's make. That was easy!

#5: Binutils: The Resurrection

Binutils comes with a bunch of tools we didn't get on the first pass, so let's go get those now. Delete the binutils directory from last time and re-extract. Don't forget that we need a build directory. Then, issue:

CC=$LFS_TGT-gcc AR=$LFS_TGT-ar RANLIB=$LFS_TGT-ranlib ../configure --prefix=/tools --disable-nls --disable-werror --with-lib-path=/tools/lib --with-sysroot

All of these options help us really build natively, ensuring that we use the cross compiler instead of the host compiler!

We can now make and install. After we do, we need to prep the linker for next chapter:

                     make -C ld clean
                     make -C ld LIB_PATH=/usr/lib:/lib
                     cp -v ld/ld-new /tools/bin

This removed all of the compiled stuff from ld, and then rebuilt everything in the ld directory.

#6: GCC: The Return

This takes up 3.4 fucking gigabytes.
What the fuck.
Anyway, the first install included some limited headers. A lot of things didn't exist before; we just got everything we needed to construct libc. We will now construct the rest of GCC.

For the first few parts, redo everything up to creating a special build directory, including the untarring and renaming of mpfr, gmp, and mpc.

Then, configure GCC in a new way:
CC=$LFS_TGT-gcc CXX=$LFS_TGT-g++ AR=$LFS_TGT-ar RANLIB=$LFS_TGT-ranlib ../configure --prefix=/tools --with-local-prefix=/tools --with-native-system-header-dir=/tools/include --enable-languages=c,c++ --disable-libstdcxx-pch --disable-multilib --disable-bootstrap --disable-libgomp

We disable bootstrap so that this doesn't take years by building itself multiple times, and comparing the builds.

Next, let's make and install.

Once installation is complete, we should make a symlink that will allow other C compilers to be installed.

                    ln -sv gcc /tools/bin/cc

Finally, sanity check by saying

                    echo 'int main(){}' > dummy.c
                    cc dummy.c
                    readelf -l a.out | grep ': /tools'

Yay! It worked <3!

Cleanup! rm -v dummy.c a.out
More tommorrow :3
