Let's boot!

Construct an fstab:

# FS MountPoint Type Options Dump FsckOrder

/dev/sdb1 / ext4 defults 1 1
proc /proc proc nosuid,noexec,nodev 0 0
sysfs /sys sysfs nosuid,noexec,nodev 0 0
devpts /dev/pts devpts gid=5,mode=620 0 0
tmpfs /run tmpfs defaults 0 0
devtmpfs /dev devtmpfs mode=0755,nosuid 0 0

Now, we need to install the kernel. We will configure, compile and install. It takes a long time.

let's begin by ensuring that the kernel tree is clean:

	make mrproper

Make sure that the kernel install runs according to our architecture:

	make defconfig

And open the configuration menu:

	make menuconfig

Set / Unset:

Device Drivers > Generic Driver Options >

X Support for uevent helper
Y Maintain a devtmpfs

SELECT KERNEL UNWINDER > Frame Pointer

Next,

	make
	make modules_install

I don't think that the host has a separate boot partition, so I will not be copying the files following there.

Now, copy a kernel image:

	cp -iv arch/x86/boot/bzImage /boot/vmlinuz-4.18.5

Make a symbol file for the kernel so that it can map entry points of the kernel API and the data structure addresses:

	cp -iv System.map /boot/System.map-4.18.5

Copy the kernel config file:

	cp -iv .config /boot/config-4.18.5

Install documentation:

	install -d /usr/share/doc/linux-4.18.5

Next, let's configure the linux module load order. Most of the time, they're loaded automatically; sometimes it needs
help. Modprobe uses /etc/modprobe.d/usb.conf for this.

Build it thus:

install -v -m755 -d /etc/modprobe.d

install ohci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i ohci_hcd ; true
install uhci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i uhci_hcd ; true

Done!

Now, for grub:

mkdir /boot/grub && cd /boot/grub

I add the following to grub.cfg on the host since I have grub installed already:

menuentry 'Archaea' {
	insmod ext2
	set root='(hd1,msdos1)'
	linux /boot/vmlinuz-4.18.9 root=/dev/sdb2 ro
}

If you get any errors, check your fstab and your inittab. They are probably wrong.
Also, don't be afraid of the grub command line. If you aren't sure what to use for set root, go to the grub cli and say set root=( and use the tab 
completion. It will show you all of the partitions. In addition, the CLI accepts commands like ls <drive>, etc, which can be helpful.
A part of my problem was that I didn't know which number my drive was because it was unlabeled and I couldn't see. I used a bootable gparted disk to
label my partition, and that was helpful when trying to find the grub syntax.

In addition, I had a few syntax errors. In the grub.cfg, I had linux=/boot... when there is not meant to be an = sign.

I had some typos in my inittab that were very subtle but prevented the system from booting, and actually caused a kernel panic.
