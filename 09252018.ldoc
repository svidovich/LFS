Today we will begin install packages.


NOTE FROM LAST TIME: Be careful setting up ~/.bashrc
You should have

           PATH=/tools/bin:/bin:/usr/bin

If you don't, you'll notice that you need to say things like

                  /bin/cat    /bin/ls

We have confirmed that echo $LFS returns /mnt/lfs.
It is time to continue. We checked last time that:

> bash is the shell we are using
> sh -> bash
> /usr/bin/awk -> gawk
> /usr/bin/yacc -> bison.yacc

We have also confirmed that all of the sources are located in /mnt/lfs/sources and NOT in /mnt/lfs/tools.

The steps for installation are as follows:
a. Untar as lfs
b. Change to the created folder
c. Install as per instructions in the book
d. Change back to /mnt/lfs/sources
e. Delete the extracted source directory unless otherwise directed

#1: binutils

We are going to need to time this one, since we want to have a metric for how long packages take to install.

Okay, so binutils documentation says making a binutils build directory.
From inside the extracted source, I will say

                 mkdir -v build
                 cd build

And then we can do

../configure --prefix=/tools --with-sysroot=$LFS --with-lib-path=/tools/lib --target=$LFS_TGT --disable-nls --disable-werror
This step took approximately 0:0:10

Once that is done, we can say make.
This step took approximately 0:2:38

Next we will build a symlink to make sure the toolchain is sane. I don't know what that means, but it's because I'm running 64 bit. So I am going to do

cast $(uname -m) in x86_64) mkdir -v /tools/lib && ln -sv lib /tools/lib64 ;; esac

This seems to have been successful.
Findally, we are going to say

                         make install

It completed in a few moments, and seems to have been successful.

My SBU is approximately 3 minutes.

# 2: Cross GCC

Let's extract GCC with tar -xJf.

GCC requires GMP, MPFR, and MPC; we will get them all.
Once gcc has been extracted, go into the created directory and execute the following for those three packages:


                 tar -xf ../<package>-<version>.tar.*z
                 mv -v <package>-<version> <package>


Okay, cool. Now let's do all of this:

for file in gcc/config/{linux,i386/linux{,64}}.h
do
 cp -uv $file{,.orig}
 sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
  -e 's@/usr@/tools@g' $file.orig > $file
 echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
 touch $file.orig
done

There is a succinct explanation of this one p39.
Next we want to set the default directory name for 64-bit libraries to lib, since we are on x64_64:

case $(uname -m) in
 x86_64)
  sed -e '/m64=/s/lib64/lib/' \
  -i.orig gcc/config/i386/t-linux64
 ;;
esac

NOTE
If you get an unterminated s command, it is because you forgot the / after lib in sed -e. This is an s command, which goes

                       /s/regexp/replacement/flags

the flags are required.

GCC wants a build directory, so issue

                      mkdir -v build
                      cd build

The configuration command is... huge. Find it on page 40. You can see a description of all of the flags there, too.
